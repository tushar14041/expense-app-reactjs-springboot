{"version":3,"sources":["logo.svg","Components/AppStyles.module.css","Components/Welcome.js","Components/Message.js","Components/Counter.js","Components/ClassClick.js","Components/ArrowFuntion.js","Components/Callback.js","Components/FuntionClick.js","Components/ChildComponent.js","Components/ParentComponent.js","Components/ConditionalRendering.js","Components/Form.js","Components/Inline.js","Components/LifecycleB.js","Components/LifecycleA.js","Components/RefsDemo.js","Components/Table.js","Components/Input.js","Components/FRInput.js","Components/FocusInput.js","Components/FRParentInput.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Component","FuntionClick","ChildComponent","props","onClick","greetHandler","Inline","LifecycleB","state","name","console","log","Table","Input","inputRef","React","createRef","this","current","focus","type","ref","FRInput","forwardRef","FRParentInput","clickHandler","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4KAAAA,EAAOC,QAAU,IAA0B,kC,kCCC3CD,EAAOC,QAAU,CAAC,QAAU,6B,+HCCNC,YCAAA,YCAAA,YCAIA,YCAEA,YCALA,YCaRC,I,OCLAC,MARf,SAAwBC,GAEpB,OACI,6BACC,4BAAQC,QAAS,kBAAMD,EAAME,aAAa,WAA1C,oBCHqBL,YCDKA,Y,iBCAfA,YCgBLM,ICgBAC,E,YA/BT,WAAYJ,GAAQ,IAAD,8BACf,4CAAMA,KAEDK,MAAQ,CACTC,KAAO,UAGXC,QAAQC,IAAI,0BAPG,E,iFAejBD,QAAQC,IAAI,kC,+BAQZ,OAFAD,QAAQC,IAAI,qBAGR,iC,gDAd0BR,EAAOK,GAErC,OADAE,QAAQC,IAAI,uCACL,S,GAbUX,aCCAA,YCDDA,YCaTY,ICOAC,E,YAnBX,WAAYV,GAAQ,IAAD,8BACf,4CAAMA,KAEDW,SAAUC,IAAMC,YAHN,E,0EAOfC,KAAKH,SAASI,QAAQC,U,+BAItB,OACI,6BACI,2BAAOC,KAAK,OAAOC,IAAKJ,KAAKH,gB,GAdzBd,aCiBLsB,GChBUtB,YDOTe,IAAMQ,YAAW,SAACpB,EAAOkB,GACrC,OACI,6BACI,2BAAOD,KAAK,OAAOC,IAAKA,SEUrBG,E,YAnBX,WAAYrB,GAAQ,IAAD,8BACf,4CAAMA,KAKVsB,aAAe,WACX,EAAKX,SAASI,QAAQC,SAJtB,EAAKL,SAAWC,IAAMC,YAHP,E,sEAUf,OACI,6BACI,kBAAC,EAAD,CAASK,IAAKJ,KAAKH,WACnB,4BAAQV,QAASa,KAAKQ,cAAtB,qB,GAdYzB,aC+Db0B,MAvCf,WAEE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCnBcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.1feffc48.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"success\":\"AppStyles_success__1kvko\"};","import React, { Component } from 'react'\r\n\r\nclass Welcome extends Component \r\n{\r\n    render(){\r\n        return (\r\n            <div>\r\n          <h1> From {this.props.name} </h1>\r\n          {this.props.children} \r\n            </div>\r\n\r\n        )\r\n}\r\n}\r\nexport default Welcome\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// class Welcome extends Component \r\n// {\r\n//     render(){\r\n//         return (\r\n//             <div>\r\n//           <h1> From {this.props.name} </h1>\r\n//           {this.props.children} \r\n//             </div>\r\n\r\n//         )\r\n// }\r\n// }","import React, { Component } from 'react'\r\n\r\nclass Message extends Component \r\n{\r\n    \r\n}\r\nexport default Message\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// lecture 10\r\n// import React, { Component } from 'react'\r\n\r\n// class Message extends Component \r\n// {\r\n//     constructor(){\r\n//         super()\r\n//         this.state = {\r\n//             message: 'Welcome Visitors'\r\n//         }\r\n//     }\r\n//     changeMessage(){\r\n//         this.setState({\r\n//             message:'Thanks for Subscribing'\r\n\r\n//         })\r\n//     }\r\n//     render(){\r\n//         return (\r\n//             <div>\r\n//              <h1> {this.state.message}</h1>\r\n//              <button onClick={() => this.changeMessage()}> Subscribe</button>\r\n\r\n//             </div>\r\n\r\n//         )\r\n// }\r\n// }\r\n// export default Message\r\n\r\n","import React, { Component } from 'react'\r\n\r\nclass Counter extends Component {\r\n    \r\n    render() {\r\n    \r\n          const { name, done} =this.props\r\n              return(\r\n                  <h1> Hellow jaipur {name}</h1>\r\n              )\r\n          \r\n        \r\n    }\r\n}\r\n\r\nexport default Counter\r\n\r\n\r\n\r\n// lec : 12 : Destructuring in class components ( check in funtional also )\r\n// In this, we can accept any no of parameter passed by App.js component and recieve it just writing it \r\n// in following lines, 1st line written in the render() below.\r\n// class Counter extends Component {\r\n    \r\n//     render() {\r\n    \r\n//           const { name, done} =this.props\r\n//               return(\r\n//                   <h1> Hellow jaipur {name}</h1>\r\n//               )\r\n          \r\n        \r\n//     }\r\n// }\r\n\r\n\r\n// lecture : 11 // set state with previous state of the component. like calling increment five times from a funtion \r\n//will only change the state of the component only once. but will be called five times. for this we set previous state.\r\n\r\n// class Counter extends Component {\r\n//     constructor(){\r\n//         super()\r\n//         this.state = {\r\n//             count:0\r\n//         }\r\n//     }\r\n   \r\n//     increment(){\r\n//         // this.setState({  \r\n//         //  count : this.state.count + 1       \r\n \r\n//         // }, () => {\r\n//         //     console.log(' Callback value : ', this.state.count)\r\n//         // })\r\n\r\n//         this.setState(prevState => ({\r\n//             count : prevState.count + 1\r\n//         }))\r\n\r\n//       // this.state.count=this.state.count + 1\r\n//        console.log(this.state.count)\r\n//     }\r\n//     incrementFive(){\r\n//         this.increment()\r\n//         this.increment()\r\n//         this.increment()\r\n//         this.increment()\r\n//         this.increment()\r\n//     }\r\n//     render() {\r\n//         return (\r\n//             <div>\r\n//                 Counter : {this.state.count} <br/>\r\n//                 <button onClick={() => this.incrementFive()}>Increment</button>\r\n                \r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n//1. Always make use of setState and never modify the state directly\r\n//2. Code has to be executed after the state has been updated ? Place that code in the call back funtion\r\n// which is the second argument to the setState method\r\n//3. When you have to update state based on the previous state value, pass in a funtion as an argument \r\n// instead of the regular object.","import React, { Component } from 'react'\r\n\r\n class ClassClick extends Component {\r\n     clickHandler()\r\n     {\r\n         console.log('Event Handling from class component ')\r\n     }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button onClick={this.clickHandler}>Click on Button</button>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ClassClick\r\n \r\n","import React, { Component } from 'react'\r\n\r\n class ArrowFuntion extends Component {\r\n \r\n    SayHello(cmt){\r\n      console.log(cmt)\r\n  }\r\n  \r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n             <button onClick={() => this.SayHello(\"hello\")}> Click me</button>\r\n             \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ArrowFuntion\r\n\r\n\r\n\r\n// passing value to a funtion from an event using arrow funtion\r\n// <div>\r\n// <button onClick={() => this.SayHello(\"hello\")}> Click me</button>\r\n\r\n// </div>\r\n\r\n\r\n// From the web : stackOverflow   https://stackoverflow.com/questions/29810914/react-js-onclick-cant-pass-value-to-method\r\n// Easy Way\r\n// Use an arrow function:\r\n\r\n// return (\r\n//   <th value={column} onClick={() => this.handleSort(column)}>{column}</th>\r\n// );\r\n// This will create a new function that calls handleSort with the right params.\r\n\r\n// Better Way\r\n// Extract it into a sub-component. The problem with using an arrow function in the render call is it will create a new function every time, which ends up causing unneeded re-renders.\r\n\r\n// If you create a sub-component, you can pass handler and use props as the arguments, which will then re-render only when the props change (because the handler reference now never changes):\r\n\r\n// Sub-component\r\n\r\n// class TableHeader extends Component {\r\n//   handleClick = () => {\r\n//     this.props.onHeaderClick(this.props.value);\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <th onClick={this.handleClick}>\r\n//         {this.props.column}\r\n//       </th>\r\n//     );\r\n//   }\r\n// }\r\n// Main component\r\n\r\n// {this.props.defaultColumns.map((column) => (\r\n//   <TableHeader\r\n//     value={column}\r\n//     onHeaderClick={this.handleSort}\r\n//   />\r\n// ))}","import React, { Component } from 'react'\r\n\r\nclass Callback extends Component {\r\n\r\n//  constructor(){\r\n//      super()\r\n\r\n  \r\n\r\n// }\r\n    filterItems(){\r\n        var todos = [ \r\n            {\r\n                title : ' Avengers ',\r\n                isDone : true\r\n            },{\r\n                title : ' Endgame ',\r\n                isDone : true\r\n            },{\r\n                title : ' Logan ',\r\n                isDone : false\r\n            },{\r\n                title : ' Evil dead ',\r\n                isDone : false\r\n            }        \r\n    \r\n        ]\r\n       // const thingsDone = \r\n       console.log(todos.filter((todo) => todo.isDone == false))\r\n      //console.log(todos)\r\n      \r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n              <button onClick={this.filterItems}>Click to filter</button>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Callback\r\n\r\n\r\n\r\n\r\n\r\n// Here matter of scope ( paranthisis ) really matters. ( stucked for 2 hours )\r\n// if todos is written outside of the funtion then I don't know how to do that as of now.","import React from 'react'\r\n\r\nfunction FuntionClick() {\r\n    \r\n  function clickHandler(){\r\n      console.log('Event Handling from funtion component ')\r\n  }\r\n    return (\r\n        <div>\r\n            \r\n            <button  onClick={clickHandler}>Click It</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FuntionClick\r\n","import React from 'react'\r\n\r\nfunction ChildComponent(props) {\r\n\r\n    return (\r\n        <div>\r\n         <button onClick={() => props.greetHandler('Child')}> Greet Parent </button>\r\n        </div>\r\n    )\r\n}\r\nexport default ChildComponent\r\n\r\n//lecture 15\r\n// parentComponent se jo parameter aaye use props me store krke greetHandler ko call kiya jo ki parentComponent ke andar hai","import React, { Component } from 'react'\r\nimport ChildComponent from './ChildComponent'\r\n\r\nclass ParentComponent extends Component {\r\n    constructor()\r\n    {\r\n        super()\r\n        this.state = {\r\n            parentName : 'parent'\r\n        }\r\n\r\n     this.greetParent = this.greetHandler.bind(this) \r\n    \r\n    }\r\n\r\n    greetHandler(childName)\r\n    {\r\n        alert(`Hello ${this.state.parentName} from ${childName}`)\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n             <ChildComponent greetHandler={this.greetParent} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ParentComponent\r\n\r\n// lecture 15\r\n// < childComponent se greetParent ko as a argument pass kiya\r\n// fir chiled se greetHandler ko call kiya \r\n// constructor me bind karna jaruri hai aur bind ka work samjna baki hai ","import React, { Component } from 'react'\r\n\r\nclass ConditionalRendering extends Component {\r\n\r\n    constructor(props)\r\n    {\r\n        super(props)\r\n        this.state = {\r\n            isLoggedIn : false\r\n        }\r\n\r\n    }\r\n    \r\n\r\n    render() {\r\n        \r\n            // We will print this based on the condition, if loggedin then Welcome Tushar else Hello Guest\r\n            // <div>\r\n            //     <h1> Welcome Tushar </h1>\r\n            //     <h1> Hello Guest </h1>\r\n            // </div>\r\n\r\n            // 1st Way -- If/ Else\r\n            // if(this.state.isLoggedIn){\r\n            //     return <div> Welcome Tushar</div>\r\n            // }else\r\n            // {\r\n            //   return <div> Hello Guest </div>\r\n            // }\r\n\r\n            //2nd Way -- Element Variables\r\n        //     let message \r\n        //     if(this.state.isLoggedIn)\r\n        //     {\r\n        //         message=<div> Welcome Tushar</div>\r\n        //     }\r\n        //     else{\r\n        //         message=<div> Hello Guest </div>\r\n        //     }\r\n        // return <div> {message} </div>\r\n\r\n            // 3rd Way -- Ternary Conditional Operators\r\n           // return this.state.isLoggedIn ? (<div> Welcome Tushar </div>) : (<div> Hello Guest </div>)\r\n        \r\n        // 4th Way -- Short circuit Operator\r\n        return this.state.isLoggedIn && <div> Welcome Tushar</div>\r\n        // if first contion is true then it will go to div tag. otherwise nothing will be returned\r\n    }\r\n}\r\n\r\nexport default ConditionalRendering\r\n\r\n\r\n\r\n// Lecture 16 --  Conditional rendering   \r\n// 1st Way -- If/ Else\r\n//2nd Way -- Element Variables\r\n// 3rd Way -- Ternary Conditional Operators\r\n// 4th Way -- Short circuit Operator\r\n","import React, { Component } from 'react'\r\n\r\n class Form extends Component {\r\n      constructor(props) {\r\n          super(props)\r\n      \r\n          this.state = {\r\n               username: '',\r\n               comments :'',\r\n               topic : 'react'\r\n          }\r\n      }\r\n\r\n      handleUsernameChange =(event)=> {\r\n         this.setState({\r\n             username : event.target.value\r\n         })\r\n\r\n      }\r\n      \r\n      handleCommentsChange = event => {\r\n          this.setState({\r\n            comments : event.target.value\r\n\r\n          })\r\n\r\n      }\r\n      handleTopicChange = event => {\r\n          this.setState({\r\n              topic : event.target.value\r\n          })\r\n      }\r\n      handleSubmit = event => {\r\n          alert (`${this.state.username} ${this.state.comments} ${this.state.topic}`)\r\n          event.preventDefault()\r\n      }\r\n\r\n    render() {\r\n        const{ username, comments, topic} = this.state\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n\r\n            <div>\r\n                <label > Username : </label>\r\n                <input type='text' value={ username} \r\n                onChange={this.handleUsernameChange} />\r\n             </div>\r\n\r\n             <div>\r\n                 <label> Comments </label>\r\n                 <textarea value={ comments} \r\n                 onChange={this.handleCommentsChange} > </textarea>\r\n             </div>\r\n             <div>\r\n                 <label> Topic </label>\r\n                 <select value={ topic} onChange={this.handleTopicChange}>\r\n                    <option value=\"react\"> React</option>\r\n                    <option value=\"angular\">Angular</option>\r\n                    <option value=\"vue\">Vue</option>\r\n                 </select>\r\n             </div>\r\n             <button type=\"submit\">Submit</button>\r\n         </form>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form\r\n\r\n// no 21. form handling \r\n// in react js","import React from 'react'\r\n\r\n\r\nfunction Inline() {\r\n    const heading = {\r\n         //font-size : '10px',\r\n         color : `blue`,\r\n        \r\n        color : 'orange',\r\n       \r\n    }\r\n    return (\r\n        <div>\r\n            <h1 style={heading} > Inline </h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Inline\r\n","import React, { Component } from 'react'\r\n\r\nclass LifecycleB extends Component {\r\n      constructor(props) {\r\n          super(props)\r\n      \r\n          this.state = {\r\n              name : 'Tushar'\r\n               \r\n          }\r\n          console.log('LifecycleB Constructor')\r\n      }\r\n\r\n      static getDerivedStateFromProps(props, state) {\r\n        console.log('LifecycleB getDerivedStateFromProps')\r\n        return null\r\n      }\r\n      componentDidMount(){\r\n        console.log('LifecycleB componentDidMount')\r\n\r\n      }\r\n\r\n\r\n    render() {\r\n        console.log('LifecycleB render')\r\n\r\n        return (\r\n            <div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LifecycleB\r\n\r\n\r\n\r\n// Output : when adding B in A file\r\n// LifecycleA Constructor\r\n// LifecycleA.js:16 LifecycleA getDerivedStateFromProps\r\n// LifecycleA.js:26 LifecycleA render\r\n// LifecycleB.js:11 LifecycleB Constructor\r\n// LifecycleB.js:15 LifecycleB getDerivedStateFromProps\r\n// LifecycleB.js:25 LifecycleB render\r\n// LifecycleB.js:19 LifecycleB componentDidMount\r\n// LifecycleA.js:20 LifecycleA componentDidMount","import React, { Component } from 'react'\r\nimport LifecycleB from './LifecycleB'\r\n\r\nclass LifecycleA extends Component {\r\n      constructor(props) {\r\n          super(props)\r\n      \r\n          this.state = {\r\n              name : 'Tushar'\r\n               \r\n          }\r\n          console.log('LifecycleA Constructor')\r\n      }\r\n\r\n      static getDerivedStateFromProps(props, state) {\r\n        console.log('LifecycleA getDerivedStateFromProps')\r\n        return null\r\n      }\r\n      componentDidMount(){\r\n        console.log('LifecycleA componentDidMount')\r\n\r\n      }\r\n\r\n\r\n    render() {\r\n        console.log('LifecycleA render')\r\n\r\n        return (\r\n            <div>\r\n                <LifecycleB/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LifecycleA\r\n\r\n\r\n// this lecture was about Mounting, In next lecture, component Updating life\r\n// cycle ke bare me bataya hai. \r\n\r\n// Output : ( if we are not calling  LifecycleB.js component into this)\r\n// LifecycleA Constructor\r\n// LifecycleA.js:15 LifecycleA getDerivedStateFromProps\r\n// LifecycleA.js:25 LifecycleA render\r\n// LifecycleA.js:19 LifecycleA componentDidMount\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Output : when adding B in A file\r\n// LifecycleA Constructor\r\n// LifecycleA.js:16 LifecycleA getDerivedStateFromProps\r\n// LifecycleA.js:26 LifecycleA render\r\n// LifecycleB.js:11 LifecycleB Constructor\r\n// LifecycleB.js:15 LifecycleB getDerivedStateFromProps\r\n// LifecycleB.js:25 LifecycleB render\r\n// LifecycleB.js:19 LifecycleB componentDidMount\r\n// LifecycleA.js:20 LifecycleA componentDidMount","import React, { Component } from 'react'\r\n\r\n class RefsDemo extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.inputRef = React.createRef()\r\n        this.cbRef = null\r\n        this.setCbRef = (element) => {\r\n            this.cbRef = element\r\n        }\r\n        \r\n    }\r\n\r\n    componentDidMount(){\r\n        if(this.cbRef) {\r\n            this.cbRef.focus()\r\n        }\r\n\r\n        // this.inputRef.current.focus()\r\n        // console.log(this.inputRef)\r\n    }\r\n\r\n    clickHandler = () => {\r\n        alert(this.inputRef.current.value)\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input type=\"text\" ref={this.inputRef} />   \r\n                <input type=\"text\" ref={this.setCbRef} />   \r\n                <button onClick={this.clickHandler}>Click</button>             \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RefsDemo\r\n\r\n\r\n\r\n// lecuture : 28 - Refs\r\n// When page loads then this will focus on that perticular field which\r\n// we to. We just need to add \"ref\" on that field.\r\n\r\n// there are type shown for the refs\r\n// one is new and one is older approach.","import React from 'react'\r\nimport Columns from './Columns'\r\n\r\nfunction Table() {\r\n    return (\r\n       <table>\r\n           <tbody>\r\n               <tr>\r\n                   <Columns/>\r\n               </tr>\r\n           </tbody>\r\n       </table>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, { Component } from 'react'\r\n\r\nclass Input extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n     \r\n        this.inputRef= React.createRef()\r\n    }\r\n    \r\n    focusInput() {\r\n        this.inputRef.current.focus()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input type=\"text\" ref={this.inputRef} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Input\r\n"," import React from 'react'\r\n\r\n// function FRInput() {\r\n//     return (\r\n//         <div>\r\n//             <input type = \"text\" />\r\n//         </div>\r\n//     )\r\n// }\r\n\r\nconst FRInput = React.forwardRef((props, ref) => {\r\n    return (\r\n        <div>\r\n            <input type=\"text\" ref={ref} />\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nexport default FRInput\r\n\r\n// lecture 30 : Forwarding Refs\r\n// instead of nornal funtional component, we use arrow funtion\r\n// and to reciving the values from the parent component, so to \r\n// recieve and create ref both, here we used it in line 11 \r\n// in that arrow funtion and whole funtion body is put on the \r\n// body of Forward ref as in line 11.","import React, { Component } from 'react'\r\nimport Input from './Input'\r\n\r\nclass FocusInput extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    this.componentRef = React.createRef()\r\n    }\r\n    \r\n\r\n    clickHandler = () => {\r\n        this.componentRef.current.focusInput()\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Input ref={this.componentRef} />\r\n                <button onClick={this.clickHandler}> Focus Input</button>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FocusInput\r\n","import React, { Component } from 'react'\r\nimport FRInput from './FRInput'\r\n\r\nclass FRParentInput extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.inputRef = React.createRef()\r\n    }\r\n     \r\n    clickHandler = () => {\r\n        this.inputRef.current.focus()\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <FRInput ref={this.inputRef} />\r\n                <button onClick={this.clickHandler} > Focus Input</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FRParentInput\r\n\r\n\r\n// lecture  30 = Forwarding Refs\r\n// some steps to follow for creating Refs\r\n\r\n// First create the ref in constructor using React.createRef()\r\n// Ex :   this.inputRef = React.createRef()\r\n// use this inputRef in the component or input or child component etc...\r\n// like <input type... ref={this.inputRef}\r\n// \r\n//\r\n//","import React, { Fragment } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport  Greet from './Components/Greet'\nimport Welcome from './Components/Welcome'\nimport Message from './Components/Message'\nimport Counter from './Components/Counter';\nimport FuntionClick from './Components/FuntionClick';\nimport ClassClick from './Components/ClassClick';\nimport ArrowFuntion from './Components/ArrowFuntion';\nimport Callback from './Components/Callback';\nimport ParentComponent from './Components/ParentComponent';\nimport ConditionalRendering from './Components/ConditionalRendering';\nimport ListRendering from './Components/ListRendering';\nimport NameList from './Components/NameList';\nimport Stylesheet from './Components/Stylesheet';\nimport Inline from './Components/Inline';\nimport './Components/myStyle.css';\nimport Styles from './Components/AppStyles.module.css';\nimport Form from './Components/Form'\nimport LifecycleA from './Components/LifecycleA';\nimport Table from './Components/Table';\nimport RefsDemo from './Components/RefsDemo';\nimport FocusInput from './Components/FocusInput';\nimport FRParentInput from './Components/FRParentInput';\n\n\nfunction App() {\n   \n  return (\n    <div className=\"App\">\n      <FRParentInput />\n       {/* <FocusInput/> */}\n     \n       {/* <RefsDemo/> */}\n\n      {/* <Table/> */}\n\n      {/* <Fragment/> */}\n\n    {/* <LifecycleA /> */}\n\n      {/* <Form /> */}\n\n\n       {/* <h1 className='error' > Error </h1>\n       <h1 className={Styles.success} > Success </h1>  */}\n\n      {/* <Inline></Inline>  */}\n\n      {/* <Stylesheet primary={true} ></Stylesheet> */}\n\n       {/* <NameList /> */}\n\n\n      {/* <ListRendering /> */}\n\n\n    {/* <ConditionalRendering /> */}\n\n    {/* <ParentComponent /> */}\n    {/* <Callback /> */}\n     </div>\n  );\n}\n\nexport default App;\n\n\n\n\n// Destructuring example\n// function App() {\n//   return (\n//     <div className=\"App\">\n//     <Greet name=\"Tulsi Khatri\" done=\"Engineering\" />\n//      </div>\n//   );\n// }\n\n\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n\n//        <Greet name=\"Tushar Khatri\" heroName=\"Hulk\">\n//         <p> This is the paragraph tag in the greet component</p>\n//       </Greet>\n     \n//       <Greet name=\"Ranjan\" heroName=\"Hawkeye\">\n//       </Greet>\n\n//        <Greet name=\"Mani Khatri\" heroName=\"Ronin\">\n//       </Greet>\n\n//      <Greet>\n//        <button>Buttun</button>\n//      </Greet>\n//        <Welcome name=\"IronMan\" />\n      \n//       <Welcome name=\"Captain America\">\n//         <p> Hello India </p>\n//       </Welcome>\n//     </div>\n//   );\n// }\n\n// while importing Greet we can also use other component name, but path should be the same.","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root')); \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}